import serial
import smtplib
import time
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configura√ß√µes de email
EMAIL_REMETENTE = "arduinos****9@gmail.com" #email de envio.
EMAIL_SENHA = "xgrvfr***ynbnpa" # Senha do para o Pyhton enviar as mensagens, precisar gerar uma atravez de senha de app. Vamos apagar depois que apresentar o projeto.
EMAIL_DESTINO = "name*****@gmail.com" # E-mail do recebedor. 


# Configura√ß√£o da porta serial
porta = serial.Serial('COM5', 9600)  # N√£o esquecer de colocar a porta certa do usb
time.sleep(2)  # Aguarda conex√£o estabilizar

def dentro_do_horario():
    agora = datetime.now().time()
    return agora.hour >= 8 or agora.hour < 5

def enviar_email():
    agora = datetime.now()
    assunto = "üö® Alerta: Porta Aberta"
    corpo = f"O sensor Hall detectou que a porta foi aberta √†s {agora.strftime('%H:%M:%S')} do dia {agora.strftime('%d/%m/%Y')}."

    msg = MIMEMultipart()
    msg['From'] = EMAIL_REMETENTE
    msg['To'] = EMAIL_DESTINO
    msg['Subject'] = assunto
    msg.attach(MIMEText(corpo, 'plain'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(EMAIL_REMETENTE, EMAIL_SENHA)
        server.send_message(msg)
        server.quit()
        print("Email enviado")
    except Exception as e:
        print("Erro ao enviar o email:", e)

# Loop que escuta o Arduino
while True:
    if porta.in_waiting > 0:
        linha = porta.readline().decode('utf-8').strip()
        print("Arduino:", linha)

        if "ALERTA: Porta aberta" in linha:
            if dentro_do_horario():
                enviar_email()
            else:
                print("‚ö†Ô∏è Porta aberta fora do hor√°rio de vigil√¢ncia. Nenhum e-mail enviado.")
